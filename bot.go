package main

import (
	"./config"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	_ "github.com/lib/pq"
	"log"
)

var mainMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/start"),
		tgbotapi.NewKeyboardButton("/pricelist")),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/order"),
		tgbotapi.NewKeyboardButton("/help"),
	),
)
var mainOrderMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö–æ—Ñ–µ"),
		tgbotapi.NewKeyboardButton("–ù–µ –∫–æ—Ñ–µ"),
	),
)

var coffeeOrderMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ß—ë—Ä–Ω—ã–π"),
		tgbotapi.NewKeyboardButton("–° –º–æ–ª–æ–∫–æ–º"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ù–µ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ñ–µ"),
		tgbotapi.NewKeyboardButton("Ice"),
	),
)

var darkCoffeeOrderMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–≠—Å–ø—Ä–µ—Å—Å–æ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ê–º–µ—Ä–∏–∫–∞–Ω–æ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–§–∏–ª—å—Ç—Ä"),
	),
)

var milkCoffeeOrderMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö–∞–ø—É—á–∏–Ω–æ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–õ–∞—Ç—Ç–µ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("Flat white"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–†–∞—Ñ"),
	),
)

var notJustCoffeeOrderMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ú–∞–ª–∏–Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö–æ—Ñ–µ–π–Ω—ã–π –ø—É–Ω—à"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ú–∞–Ω–≥–æ–≤—ã–π –ª–∞—Ç—Ç–µ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–†–∞—Ñ –ú–æ–Ω—Ç–µ-–ö—Ä–∏—Å—Ç–æ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–æ–≤–ª–∞—Ç—Ç–µ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö–æ—Ñ–µ –¥–ª—è –∫–æ—Ç–∏–∫–∞ :3"),
	),
)

var iceCoffeeOrderMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–í–∏—à–Ω—ë–≤—ã–π –±–∞–º–±–ª"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–≠—Å–ø—Ä–µ—Å—Å–æ-—Ç–æ–Ω–∏–∫"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ê–π—Å –∫–∞—Å–∫–∞—Ä–∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ì—Ä—É—à–µ–≤—ã–π —á–∞–π"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ü–µ—Ä—Å–∏–∫–æ–≤—ã–π —á–∞–π"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö–æ—Ñ–µ –¥–ª—è –∫–æ—Ç–∏–∫–∞ :3"),
	),
)

var notcoffeeOrderMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö–∞–∫–∞–æ"),
		tgbotapi.NewKeyboardButton("–°—ç–Ω–¥–≤–∏—á —Å —Ä—ã–±–æ–π"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö–∞—Å–∫–∞—Ä–∞"),
		tgbotapi.NewKeyboardButton("–°—ç–Ω–¥–≤–∏—á —Å –≤–µ—Ç—á–∏–Ω–æ–π"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ú–∞—Ç—á–∞-–ª–∞—Ç—Ç–µ"),
		tgbotapi.NewKeyboardButton("–°—ç–Ω–¥–≤–∏—á —Å –∫—É—Ä–∏—Ü–µ–π"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ë—ç–±–∏—á–∏–Ω–æ"),
		tgbotapi.NewKeyboardButton("–ó–µ—Ñ–∏—Ä"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ß–∞–π"),
		tgbotapi.NewKeyboardButton("–ü–µ—á–µ–Ω—å–µ"),
	),
)

var bot *tgbotapi.BotAPI

func main() {
	fmt.Println("Sup, I'm alive again:3")
	var err error
	bot, err = tgbotapi.NewBotAPI(config.BotToken)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	err = config.Connect()
	if err != nil {
		panic("Database wasn't connected :c")
	}

	var updates tgbotapi.UpdatesChannel
	updates, err = bot.GetUpdatesChan(u)

	for update := range updates {
		/*if update.Message == nil { // ignore any non-Message Updates
			continue
		}

		//log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
		switch {

		case update.Message.Text == "/start":
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "Welcome, friend "+update.Message.Chat.FirstName+":3"))

		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
			//msg.ReplyToMessageID = update.Message.MessageID
			bot.Send(msg)
		}*/
		/*msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
		msg.ReplyMarkup = mainMenu
		bot.Send(msg)*/
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				str := "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, " + update.Message.From.FirstName + " " + update.Message.From.LastName
				str += " üëã \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ª—é–±–∏—Ç–µ–ª–µ–π –∫–æ—Ñ–µ ‚òï\n"
				str += "–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
				str += ""
				str += ""
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, str))
			case "pricelist":
				bot.Send(tgbotapi.NewDocumentUpload(update.Message.Chat.ID, "./config/pricelist.jpg"))
				bot.Send(tgbotapi.NewPhotoUpload(update.Message.Chat.ID, "./config/pricelist.jpg"))
				//bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "There will be price list"))
			case "help":
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID,
					"–ù–∞—à –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥–∞—ë—Ç –∫–æ—Ñ–µ–π–Ω—ã–µ –∑—ë—Ä–Ω–∞, –¥–ª—è –í–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ \n"+
						"/start - –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"+
						"/pricelist - –≤—ã–≤–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞\n"+
						"/order - –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–∫—É–ø–∫–∏\n"+
						"/help - –≤—ã–≤–æ–¥ –ø–æ–º–æ—â–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"))
			case "order":
				//bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Ç–∞–∫, –í—ã –ø—Ä–∏—à–ª–∏ –∑–∞ –æ—Ç–±–æ—Ä–Ω—ã–º –∫–æ—Ñ–µüòã –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? :)"))
				orderMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Ç–∞–∫, –í—ã –ø—Ä–∏—à–ª–∏ –∑–∞ –æ—Ç–±–æ—Ä–Ω—ã–º –∫–æ—Ñ–µüòã –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? :)")
				orderMsg.ReplyMarkup = mainOrderMenu
				bot.Send(orderMsg)
			default:
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏(–∫–æ–º–∞–Ω–¥–∞–º–∏) –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏üòä"))
			}
		}
		switch update.Message.Text {
		case "–ö–æ—Ñ–µ":
			coffeeOrderMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Ç–∞–∫, –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ñ–µüòã –ö–∞–∫–æ–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? :)")
			coffeeOrderMsg.ReplyMarkup = coffeeOrderMenu
			bot.Send(coffeeOrderMsg)
		case "–ù–µ –∫–æ—Ñ–µ":
			notCoffeeOrderMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Ç–∞–∫, –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–µ –∫–æ—Ñ–µüòã –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ? :)")
			notCoffeeOrderMsg.ReplyMarkup = notcoffeeOrderMenu
			bot.Send(notCoffeeOrderMsg)

		case "–ß—ë—Ä–Ω—ã–π":
			darkCoffeeOrderMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Ç–∞–∫, –≤—ã–±–æ—Ä –ø–∞–ª –Ω–∞ —á—ë—Ä–Ω—ã–π –∫–æ—Ñ–µüòã –ö–∞–∫–æ–π —Ö–æ—Ç–∏—Ç–µ? :)")
			darkCoffeeOrderMsg.ReplyMarkup = darkCoffeeOrderMenu
			bot.Send(darkCoffeeOrderMsg)
		case "–° –º–æ–ª–æ–∫–æ–º":
			milkCoffeeOrderMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Äüòã –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? :)")
			milkCoffeeOrderMsg.ReplyMarkup = milkCoffeeOrderMenu
			bot.Send(milkCoffeeOrderMsg)
		case "–ù–µ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ñ–µ":
			notJustCoffeeOrderMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û–≥–æ, –ª—é–±–∏—Ç–µ –∫–æ—Ñ–µ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å?" +
				" –ü–æ—Ö–≤–∞–ª—å–Ω–æüòã –ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ? :)")
			notJustCoffeeOrderMsg.ReplyMarkup = notJustCoffeeOrderMenu
			bot.Send(notJustCoffeeOrderMsg)
		case "Ice":
			iceCoffeeOrderMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–õ—é–±–∏—Ç–µ –ø–æ-—Ö–æ–ª–æ–¥–Ω–µ–µ? üòã –ù–∞ —á—Ç–æ –ø–∞–ª –í–∞—à –≤–∑–≥–ª—è–¥? :)")
			iceCoffeeOrderMsg.ReplyMarkup = iceCoffeeOrderMenu
			bot.Send(iceCoffeeOrderMsg)
		}
	}
}

/*
func order(update tgbotapi.Update) {
	switch update.Message.Text {
	case "–ö–æ—Ñ–µ":
		upd := tgbotapi.NewUpdate(0)
		upd.Timeout = 60
		answers, _ := bot.GetUpdatesChan(upd)
		var answer tgbotapi.Update
		for answer = range answers {
			switch answer.Message.Text {
			case "–ß—ë—Ä–Ω—ã–π":
				switch "–ß—ë—Ä–Ω—ã–π" {
				case "–≠—Å–ø—Ä–µ—Å—Å–æ":
				case "–ê–º–µ—Ä–∏–∫–∞–Ω–æ":
				case "–§–∏–ª—å—Ç—Ä":
				}
				switch "–° –º–æ–ª–æ–∫–æ–º" {
				case "–ö–∞–ø—É—á–∏–Ω–æ":
				case "–õ–∞—Ç—Ç–µ":
				case "–§–ª–µ—Ç —É–∞–π—Ç":
				case "–†–∞—Ñ":
				}
				switch "–ù–µ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ñ–µ" {
				case "–ú–∞–ª–∏–Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä":
				case "–ö–æ—Ñ–µ–π–Ω—ã–π –ø—É–Ω—à":
				case "–ú–∞–Ω–≥–æ–≤—ã–π –ª–∞—Ç—Ç–µ":
				case "–†–∞—Ñ –ú–æ–Ω—Ç–µ-–ö—Ä–∏—Å—Ç–æ":
				case "–î–æ–≤–ª–∞—Ç—Ç–µ":
				case "–ö–æ—Ñ–µ –¥–ª—è –∫–æ—Ç–∏–∫–∞":
				}
			}
		}
	}

}
*/
